def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    
    a, b = 0, 1
    for _ in range(2, n+1):
        a, b = b, a + b
    return b

#While logically correct, this recursive implementation has two major problems:
#Exponential Time Complexity: It recalculates the same Fibonacci numbers many times, leading to O(2^n) time complexity.
#Stack Overflow Risk: For large n, it could hit Python's recursion depth limit.

##The iterative approach is generally best for this problem as it:
#Runs in O(n) time
#Uses O(1) space
#Doesn't risk stack overflow
#Is simple and easy to understand
